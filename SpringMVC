SpringMVC 


一、基本概述

1.SpringMVC是什么：
Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块，属于web层框架。
它用在基于MVC的表现层开发，类似于struts2框架。


2.有Struts2为什么还有使用SpringMVC？
两者区别：
	(1).Struts2运行速度较慢，比SpringMVC要慢。是因为struts2绑定参数是在成员变量上，而springmvc是绑在形参上。
	(2)strut2单例，springmvc多例。单例是一个方法为单位，一个请求复制一个方法，多例以一个类为单位模版，一个请求复制一个类。
	(3)strut2有值栈而springmvc是通过request域。
	(4)springmvc入口是一个servlet即前端控制器，strut2是一个filter过滤器。
	
	

3.流程结构图      （1.png 流程图）   
(1)用户请求传至前端控制器
(2)前端控制器 DispatcherServlert，即servlet拦截请求给 处理器映射器 发送请求查询Handler
(3)处理器映射器，处理请求业务并返回处理结果Hanader 返回给前端控制器
(4)前端控制器不做事同时 请求执行Handler 转发到 处理器适配器 HandlerAdapter
(5)处理器适配器  执行Handler 在处理器返回ModelAndView 给前端控制器
(6)前端控制器请求解析视图给 视图解析器,视图解析器返回view对象
(7)前端控制器通过JSP页面渲染后返回html页面 最终响应给用户


4.入门程序
(1)导包
(2)web.xml中配置springmvc 
<servlet>
		<servlet-name>springmvc(取名)</servlet-name>		
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	       <init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring-mvc.xml(配置文件)</param-value>
	       </init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc(取名一致)</servlet-name>
		<url-pattern>*.action</url-pattern>
     <!--
		  /*              拦截所有jsp/js/png/css 
		  *.action        拦截action结尾的请求
		  *.do            拦截do结尾的请求
                  /               拦截所有（不包括jsp）(包括js/png/css)
     -->
	</servlet-mapping>
	
	
(3)配置文件     spring-mvc.xml
 配置扫描@controller注解
<!-- 配置controller扫描包 -->
	<context:component-scan base-package="cn.itcast" />
	
(4)action 中   类上@Controller  方法上@RequestMappering(vlaue=请求路径)
@Controller
public class ItemController {
@RequestMapping(value="/itemList.action")                          (输入地址：localhhost:8080/springmvc/itemList.action)
public ModelAndView itemList(){	
	ModelAndView mav=new ModelAndView();
	mav.setViewName("/WEB-INF/jsp/itemList.jsp");
	return mav;
}

（注解说明：@Controller     　负责注册一个bean 到spring 上下文中
           @RequestMappin    注解为控制器指定可以处理哪些 URL 请求）






二、框架结构
（框架图.png）
前端控制器(DispatcherServlert)、处理器映射器（HandlerMapping）、处理器适配器(HandlerAdapter)、处理器(Handler)、视图解析器(ViewResolver)、JSP

1.组件扫描器
<!-- 配置controller扫描包，多个包之间用,分隔 -->
<context:component-scan base-package="cn.itcast.springmvc.controller" />

2.配置处理器映射器
<!-- 配置处理器映射器 -->
<bean  class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />

3.配置处理器适配器
<!-- 配置处理器适配器 -->
<bean  class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" />

4.注解驱动
可以在springmvc.xml配置文件中使用<mvc:annotation-driven>替代注解处理器和适配器的配置。
<!-- 注解驱动 -->
<mvc:annotation-driven />

5.视图解析器
	<!-- 配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置逻辑视图的前缀 -->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<!-- 配置逻辑视图的后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>





三、参数绑定

1.默认绑定 
2.简单类型参数绑定          @RequestParam 的使用
3.参数绑定之POJO类型                 upadata  提交类  
 a.解决POST乱码问题
 	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- 设置编码参是UTF8 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
4.参数绑定之包装的POJO类型
5.自定义参数类型  
6.参数绑定之绑定数组
7.参数绑定之List


四、相关
1.RequestMapping的使用

2.Controller方法返回值
a.ModelAndView  不建议使用   public ModelAndView item(){         new ModelAndView ...    }
b.String     官方建议       public String item(Model model){     model.addAttribute(,)   return ..   }
c.void        ajax请求适合          public void item(Model model,...){  model.addAttribute(,)      request.getRequestDispatchaer("").forward(request,response);     }

3.异常处理器









整合mybatis



































