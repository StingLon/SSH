Hibernate

开源轻量级框架
Hibernate是一种ORM框架
让实体类首先和数据库表对应，让实体类属性和表里字段对应，以实现直接存取Java对象！



hibernate执行流程：
第一步：加载hibernate核心配置文件
第二步：创建sessionFactory对象
第三步：使用sessionFactory创建SESSION对象
第四步：开启事务
第五步：写具体逻辑crud操作
第六步：提交事务
第七步：关闭资源

    Configuration config= new Configuration();
		config.configure();		
		SessionFactory sessionFactory=config.buildSessionFactory();	
		Session session=sessionFactory.openSession();
		Transaction tx=session.beginTransaction();
		...
		session.save(demo1);
		tx.commit();
		session.close();
		sessionFactory.close();




1.引入jar开发包
hibernate3.jar核心  +  required 必须引入的(6个) +  jpa 目录  + 数据库驱动包

2.配置相关的XML文件   相关写法
主配置文件：     hibernate.cfg.xml
映射配置：      .hbm.xml


3.熟悉API
Configuration             配置管理类：主要管理配置文件的一个类
                          configure方法                   加载配置文件
                          buildSessionFactory方法         创建Session工厂

SessionFactory 
                          openSession方法                   创建一个Session对象
                          getCurrentSession方法             创建Session对象或取出Session对象

Session                  （1）类似jdbc中connection（2）调用crud操作（3）session对象单线程对象，session对象不能共用，只能使用
                    
Transaction               事务四个特性：原子性、一致性、隔离性、持久性


4.hibernate的三种状态（概念）
瞬时态：对象没有ID值，对象和session没有关联
持久态：对象有ID值，和SESSION有关联
托管态：有ID值，和session没关联


一级缓存 ：
session的缓存
作用：减少对数据库的访问次数，从而提升hibernate的执行效率。

只要是持久化对象状态的，都受Session管理，也就是说，都会在Session缓存中
用户不能操作缓存内容； 如果想操作缓存内容，必须通过hibernate提供的evit/clear方法操作。

相关方法：
session.flush();       让一级缓存与数据库同步
session.evict(arg0);    清空一级缓存中指定的对象
session.clear();       清空一级缓存中缓存的所有对象

二级缓存
目前已经不使用，替代技术redis




懒加载：懒加载就是当使用数据的时候才去获取数据、执行对应的SQL语句…当还没用到数据的时候，就不加载对应的数据!
主要目的就是为了提高Hibernate的性能，提高执行效率！

get: 及时加载，只要调用get方法立刻向数据库查询
load:默认使用懒加载，当用到数据的时候才向数据库查询。

User user = (User) session.load(User.class, 1);


可以在对应的配置文件用通常lazy属性来设置
    <class name="IdCard" table="IdCard" lazy="false">
true   使用懒加载
false   关闭懒加载




5.  五种查询方式：

         （1） 对象导航查询  
	   根据ID查询某个客户，在查询这个客户里面所有的联系人
	   

         （2）HQL查询   
	        Query对象，写hql语句实现查询
                        Query q = session.createQuery("from Dept"); 
 
         （3）QBC查询(Criteria 查询)       query by criteria  完全面向对象的查询
                       Criteria criteria = session.createCriteria(Monkey.class);
 
         （4）OID查询    
	   根据id查询某一条记录，返回对象
 
          （5）本地SQL查询
                    SQLQuery sqlQuery = session.createSQLQuery("SELECT * FROM monkey_ limit 0,3");

            
	    
	    
	    
	  分页查询：
	       得到数据库表中的总记录数
               查询起始位置到末尾位数的数据
        Query query = session.createQuery("from Monkey");
        //得到滚动结果集
        ScrollableResults scroll = query.scroll();
        //滚动到最后一行
        scroll.last();
        int i = scroll.getRowNumber() + 1;
        System.out.println("总计路数：" + i);
        //设置分页位置
        query.setFirstResult(0);
        query.setMaxResults(3);
        System.out.println(query.list());
	    
	    

6.映射相关

（1）Set集合映射配置
 <!-- 在客户映射中中表示所有的联系人              使用set标签表示所有人，set标签中有Name属性，属性写在客户实体类中表示联系人的set集合名称     -->    
        <set name="setLinkMan" cascade="save-update,delete">
           <!-- 一对多建表，由外键
           hibernate机制，双向维护外键，在一和多那一方都配置外键
             column属性值，外间名称
            -->       
          <key column="clid"></key>
          <!-- 客户所有联系人，class中写联系人实体类全路径 -->
          <one-to-many class="huibernateDemo.LinkMan"/>
        </set>    


List集合映射配置                        List集合是有序的，因此要多配置一个列来维护数据的有序性！
        <list name="address" table="address">
            <key column="user_id"></key>
            <!--index是关键字，不能使用！！！！-->
            <list-index column="indexNum"></list-index>
            <element column="addr" type="string"></element>
        </list>
        
        
Map集合映射配置                         Map集合和Collection集合的区别就是键值对模型，那么在配置的时候多一个key即可！
 

（2）组件映射
    继承映射

（3）子类拥有自己的表、父类不对应表【推荐】union-subclass
     子类、父类都有自己的表joined-subclass，那么就是三张表
     子类父类共有一张表subclass


7.一对多

 多对多


8.inverse属性 
   表示控制权是否转移.
   因为hibernate双向维护外键，在客户和联系人中都需要维护外键，修改客户时修改一次外键，修改联系人时候也是修改一次外键，造成了性能问题。
   解决：让其中一方放弃外键维护
 <set name="user"  inverse="true">           (ture为放弃，false是不放弃)
 
inverse属性只能在“一”的一方设置

Inverse在维护关联关系时是否起作用：
保存数据
获取数据
解除关联关系
删除数据对关联关系的影响


9.cascade属性
级联             操作某一属性时，对其他关联字段的影响

可以在“一”的一方也可以在“多”的一方设置

<set name="setLinkMan" cascade="save-update,delete">



10.连接池
  <!-- 【连接池配置】 -->
        <!-- 配置连接驱动管理类 -->
        <property name="hibernate.connection.provider_class">org.hibernate.connection.C3P0ConnectionProvider</property>
        <!-- 配置连接池参数信息 -->
        <property name="hibernate.c3p0.min_size">2</property>
        <property name="hibernate.c3p0.max_size">4</property>
        <property name="hibernate.c3p0.timeout">5000</property>
        <property name="hibernate.c3p0.max_statements">10</property>
        <property name="hibernate.c3p0.idle_test_period">30000</property>
        <property name="hibernate.c3p0.acquire_increment">2</property>




11.在设计数据库表时，我们使用PowerDesigner来生成概念模型\物理模型…



12.逆向工程可以帮我们自动生成实体和映射文件，这样就非常方便了。




























