Mybatis整合spring

框架结构：
cn.ssm.controller----controller.java
cn.ssm.mapper----UserMapper.java/User.xml
cn.ssm.pojo----User.java
cn.ssm.service---UserService.java
cn.ssm.service.impl---UserServiceImpl.java
applicationContext.xml
springMVC.xml
web.xml
jsp


1.pojo包下User.java
get/set/toString

2.Mapper包下 接口UserMapper

    public void add(Category category); 
        
    public void delete(int id); 
        
    public Category get(int id); 
      
    public void update(Category category);  
        
    public List<Category> list();
     
    public int count();


3.Mapper包下  User.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
    <mapper namespace="cn.ssm.mapper.UserMapper">
    
        <insert id="add" parameterType="user" >
            insert into user( name ) values (#{name})   
        </insert>      
        <delete id="delete" parameterType="user" >
            delete from user where id= #{id}  
        </delete>  
        <select id="get" parameterType="int" resultType="user">
            select * from   user  where id= #{id}   
        </select>
        <update id="update" parameterType="user" >
            update user set name=#{name} where id=#{id}   
        </update>
        <select id="list" resultType="user">
            select * from  user    
        </select>    
    </mapper>


4.接口UserService 

List<Category> list();
...

5.实现接口类UserServiceImpl
@Service
public class UserServiceImpl  implements UserService{
    @Autowired
   UserMapper userMapper;    
    public List<Category> list(){
        return userMapper.list();
    }


6.controller.java
// 告诉spring mvc这是一个控制器类
@Controller
@RequestMapping("")
public class UserController {
    @Autowired
    UserService userService;
 
    @RequestMapping("listUser")
    public ModelAndView listCategory(){
        ModelAndView mav = new ModelAndView();
        List<user> cs= userService.list();       
        // 放入转发参数
        mav.addObject("cs", cs);
        // 放入jsp路径
        mav.setViewName("listUser");     //添加jsp下listUser.jsp
        return mav;
    }


7.web.xml

 <!-- spring的配置文件-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
     
    <!-- spring mvc核心：分发servlet -->
    <servlet>
        <servlet-name>mvc-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- spring mvc的配置文件 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springMVC.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>mvc-dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


8.applicationContext.xml

...
  <context:annotation-config />
    <context:component-scan base-package="cn.ssm.service" />
 
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
      <property name="driverClassName"> 
          <value>com.mysql.jdbc.Driver</value> 
      </property> 
      <property name="url"> 
          <value>jdbc:mysql://localhost:3306/ssm?characterEncoding=UTF-8</value> 
      </property> 
      <property name="username"> 
          <value>root</value> 
      </property> 
      <property name="password"> 
          <value>123456</value> 
      </property>    
    </bean>
     
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="typeAliasesPackage" value="cn.ssm.pojo" />
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:cn/ssm/mapper/*.xml"/>
    </bean>
 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.ssm.mapper"/>
    </bean>


9.springMVC.xml

 <context:annotation-config/>
 
    <context:component-scan base-package="cn.ssm.controller">
          <context:include-filter type="annotation"
          expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
 
    <mvc:annotation-driven />
     
    <mvc:default-servlet-handler />
 
    <!-- 视图定位 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
</beans>


10.jsp
<table align='center' border='1' cellspacing='0'>
    <tr>
        <td>id</td>
        <td>name</td>
    </tr>
    <c:forEach items="${cs}" var="c" varStatus="st">
        <tr>
            <td>${c.id}</td>
            <td>${c.name}</td>            
        </tr>
    </c:forEach>
</table>


11.部署
http://127.0.0.1:8080/ssm/listCategory


12.思路：

1. 首先浏览器上访问路径 /listCategory
2. tomcat根据web.xml上的配置信息，拦截到了/listCategory，并将其交由DispatcherServlet处理。
3. DispatcherServlet 根据springMVC的配置，将这次请求交由CategoryController类进行处理，所以需要进行这个类的实例化
4. 在实例化CategoryController的时候，注入CategoryServiceImpl。 (自动装配实现了CategoryService接口的的实例，只有CategoryServiceImpl实现了CategoryService接口，所以就会注入CategoryServiceImpl)
5. 在实例化CategoryServiceImpl的时候，又注入CategoryMapper
6. 根据ApplicationContext.xml中的配置信息，将CategoryMapper和Category.xml关联起来了。
7. 这样拿到了实例化好了的CategoryController,并调用listCategory方法
8. 在listCategory方法中，访问CategoryService,并获取数据，并把数据放在"cs"上，接着服务端跳转到listCategory.jsp去
9. 最后在listCategory.jsp 中显示数据
























